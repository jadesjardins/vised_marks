function [EEG,com]=pop_marks_add_label(EEG,varargin)

com = ''; % this initialization ensure that the function will return something
          % if the user press the cancel button            


% display help if not enough arguments
% ------------------------------------
if nargin < 1
	help pop_marks_add_label;
	return;
end;	

g=struct(varargin{:});

try g.action; catch; g.action='add';end
action_cell={'add','remove','clear'};

switch g.action
    case 'add'
        action_val = 1;
    case 'remove'
        action_val = 2;
    case 'clear'
        action_val = 3;
end

try g.message; catch; g.message='Enter mark label properties';end;

try g.info_type; info_type_enable='off';
catch;g.info_type = 'time_info';info_type_enable='on';end

try g.label; label_enable='off';
catch; g.label = '';label_enable='on';end

try g.color; color_enable='off';
catch;
    switch g.info_type
        case 'time_info'
            g.color = [];
            color_enable='on';
            label_cell={EEG.marks.time_info.label};
        case 'chan_info'
            g.color = [];
            color_enable='off';
            label_cell={EEG.marks.chan_info.label};
        case 'comp_info'
            g.color = [];
            color_enable='off';
            label_cell={EEG.marks.comp_info.label};
    end
end

try g.line_color; line_color_enable='off';
catch;
    switch g.info_type
        case 'time_info'
            g.line_color = [];
            line_color_enable='off';
        otherwise
            g.line_color = [];
            line_color_enable='on';
    end
end

try g.tag_color; tag_color_enable='off';
catch;
    switch g.info_type
        case 'time_info'
            g.tag_color = [];
            tag_color_enable='off';
        otherwise
            g.tag_color = [];
            tag_color_enable='on';
    end
end

try g.order; order_enable='off';
catch
    switch g.info_type
        case 'time_info'
            g.order = [];
            order_enable='off';
        otherwise
            g.order = [1];
            order_enable='on';
    end
end

switch g.info_type
    case 'time_info'
        info_type_val = 1;
    case 'chan_info'
        info_type_val = 2;
    case 'comp_info'
        info_type_val = 3;
end
   
info_type_cell={'time_info','chan_info','comp_info'};
% pop up window
% -------------
results=inputgui( ...
    {[1] [1] [2 2 1] [2 2 1] [2 2 1] [2 2 1] [2 2 1] [2 2 1] [2 2 1] }, ...
    {...
    {'Style','text','string',blanks(120)}, ...
    ...
    {'Style','text','string',g.message}, ...
    ...
    {'Style','text','string','Action to perform'}, ...
    {'Style','popup','string',action_cell,'value',action_val,'tag','pop_action', ...
    'callback',['switch get(findobj(gcbf,''tag'',''pop_action''),''value'');', ...
                '    case 1;', ...
                '        switch get(findobj(gcbf,''tag'',''pop_it''),''value'');', ...
                '            case 1;', ...
                '                set(findobj(gcbf,''tag'',''txt_color''),''enable'',''on'');', ...
                '                set(findobj(gcbf,''tag'',''edt_color''),''enable'',''on'');', ...
                '                set(findobj(gcbf,''tag'',''but_color''),''enable'',''on'');', ...
                '                set(findobj(gcbf,''tag'',''txt_line_color''),''enable'',''off'');', ...
                '                set(findobj(gcbf,''tag'',''edt_line_color''),''enable'',''off'');', ...
                '                set(findobj(gcbf,''tag'',''but_line_color''),''enable'',''off'');', ...
                '                set(findobj(gcbf,''tag'',''txt_tag_color''),''enable'',''off'');', ...
                '                set(findobj(gcbf,''tag'',''edt_tag_color''),''enable'',''off'');', ...
                '                set(findobj(gcbf,''tag'',''but_tag_color''),''enable'',''off'');', ...
                '                set(findobj(gcbf,''tag'',''txt_order''),''enable'',''off'');', ...
                '                set(findobj(gcbf,''tag'',''edt_order''),''enable'',''off'');', ...
                '            case {2,3};', ...
                '                set(findobj(gcbf,''tag'',''txt_color''),''enable'',''off'');', ...
                '                set(findobj(gcbf,''tag'',''edt_color''),''enable'',''off'');', ...
                '                set(findobj(gcbf,''tag'',''but_color''),''enable'',''off'');', ...
                '                set(findobj(gcbf,''tag'',''txt_line_color''),''enable'',''on'');', ...
                '                set(findobj(gcbf,''tag'',''edt_line_color''),''enable'',''on'');', ...
                '                set(findobj(gcbf,''tag'',''but_line_color''),''enable'',''on'');', ...
                '                set(findobj(gcbf,''tag'',''txt_tag_color''),''enable'',''on'');', ...
                '                set(findobj(gcbf,''tag'',''edt_tag_color''),''enable'',''on'');', ...
                '                set(findobj(gcbf,''tag'',''but_tag_color''),''enable'',''on'');', ...
                '                set(findobj(gcbf,''tag'',''txt_order''),''enable'',''on'');', ...
                '                set(findobj(gcbf,''tag'',''edt_order''),''enable'',''on'');', ...
                '        end;', ...
                '    case {2,3};', ...
                '        set(findobj(gcbf,''tag'',''txt_color''),''enable'',''off'');', ...
                '        set(findobj(gcbf,''tag'',''edt_color''),''enable'',''off'');', ...
                '        set(findobj(gcbf,''tag'',''but_color''),''enable'',''off'');', ...
                '        set(findobj(gcbf,''tag'',''txt_line_color''),''enable'',''off'');', ...
                '        set(findobj(gcbf,''tag'',''edt_line_color''),''enable'',''off'');', ...
                '        set(findobj(gcbf,''tag'',''but_line_color''),''enable'',''off'');', ...
                '        set(findobj(gcbf,''tag'',''txt_tag_color''),''enable'',''off'');', ...
                '        set(findobj(gcbf,''tag'',''edt_tag_color''),''enable'',''off'');', ...
                '        set(findobj(gcbf,''tag'',''but_tag_color''),''enable'',''off'');', ...
                '        set(findobj(gcbf,''tag'',''txt_order''),''enable'',''off'');', ...
                '        set(findobj(gcbf,''tag'',''edt_order''),''enable'',''off'');', ...
                'end;']}, ...
    {},...
    ...
    {'Style','text','string','Information type','enable',info_type_enable}, ...
    {'Style','popup','string',info_type_cell,'value',info_type_val,'tag','pop_it','enable',info_type_enable, ...
    'callback',['eval(get(findobj(gcbf,''tag'',''push_label''),''callback''));', ...
                'eval(get(findobj(gcbf,''tag'',''pop_action''),''callback''));']}, ...
    {}, ...
    ...
    {'Style','text','string','Mark label','enable',label_enable}, ...
    {'Style','edit','string',g.label,'tag','edt_label','enable',label_enable}, ...
    {'Style','pushbutton','string','...','tag','push_label', ...
    'callback',['switch get(findobj(gcbf,''tag'',''pop_it''),''value'');', ...
                '    case 1;', ...
                '        [label_ind,label_str,label_cell]=pop_chansel({EEG.marks.time_info.label});', ...
                '        set(findobj(gcbf, ''tag'', ''edt_label''), ''string'', vararg2str(label_cell));', ...
                '    case 2;', ...
                '        [label_ind,label_str,label_cell]=pop_chansel({EEG.marks.chan_info.label});', ...
                '        set(findobj(gcbf, ''tag'', ''edt_label''), ''string'', vararg2str(label_cell));', ...
                '    case 3;', ...
                '        [label_ind,label_str,label_cell]=pop_chansel({EEG.marks.comp_info.label});', ...
                '        set(findobj(gcbf, ''tag'', ''edt_label''), ''string'', vararg2str(label_cell));', ...
                'end;']}, ...
    ...
    ...        {'Style','text','string','Critical inter-flag gap [ms]'}, ...
    ...        {'Style','edit','string','3000','tag','edt_ifg'}, ...
    ...        {'Style','text','string','Offsets [ms]'}, ...
    ...        {'Style','edit','string','[0 0]','tag','edt_mo'}, ...
    ...
    ...        {'Style','text','string','Gap mark reference points'}, ...
    ...        {'Style','popup','string',ref_points_cell,'value',1}, ...
    ...        {'Style','checkbox','string','Invert flags'}, ...
    ...
    ...        {'Style','text','string','New mark label'}, ...
    ...        {'Style','edit','string','event_gap','tag','edt_nfl'}, ...
    ...        {}, ...
    ...
    {'Style','text','string','New time mark color ([R G B])','tag','txt_color','enable',color_enable}, ...
    {'Style','edit','string',vararg2str(g.color),'tag','edt_color', 'enable',color_enable, ...
    'callback',[ 'set(findobj(gcbf,''tag'',''but_color''),' ...
    '''backgroundcolor'',str2num(get(gcbo,''string'')));']}, ...
    {'Style', 'pushbutton', 'string', '', 'tag', 'but_color', 'enable',color_enable, ...
    'callback', [ 'tmpcolor = uisetcolor(''select mark color''); if length(tmpcolor) ~= 1,' ...
    'new_color=tmpcolor; set(gcbo, ''backgroundcolor'', tmpcolor);', ...
    'set(findobj(gcbf,''tag'',''edt_color''),''string'',num2str(tmpcolor));',...
    'end; clear tmpcolor;'] } ...
    ...
    {'Style','text','string','New line mark color ([R G B])','tag','txt_line_color','enable',line_color_enable}, ...
    {'Style','edit','string',vararg2str(g.line_color),'tag','edt_line_color', 'enable',line_color_enable, ...
    'callback',[ 'set(findobj(gcbf,''tag'',''but_line_color''),' ...
    '''backgroundcolor'',str2num(get(gcbo,''string'')));disp(str2num(get(gcbo,''string'')));']}, ...
    {'Style', 'pushbutton', 'string', '','tag', 'but_line_color', 'enable',line_color_enable, ...
    'callback', [ 'tmpcolor = uisetcolor(''select mark color''); if length(tmpcolor) ~= 1,' ...
    'new_color=tmpcolor; set(gcbo, ''backgroundcolor'', tmpcolor);', ...
    'set(findobj(gcbf,''tag'',''edt_line_color''),''string'',num2str(tmpcolor));',...
    'end; clear tmpcolor;'] } ...
    ...
    {'Style','text','string','New tag mark color ([R G B])','tag','txt_tag_color','enable',tag_color_enable}, ...
    {'Style','edit','string',vararg2str(g.tag_color),'tag','edt_tag_color', 'enable',tag_color_enable, ...
    'callback',[ 'set(findobj(gcbf,''tag'',''but_tag_color''),' ...
    '''backgroundcolor'',str2num(get(gcbo,''string'')));']}, ...
    {'Style', 'pushbutton', 'string', '', 'tag', 'but_tag_color', 'enable',tag_color_enable, ...
    'callback', [ 'tmpcolor = uisetcolor(''select mark color''); if length(tmpcolor) ~= 1,' ...
    'new_color=tmpcolor; set(gcbo, ''backgroundcolor'', tmpcolor);', ...
    'set(findobj(gcbf,''tag'',''edt_tag_color''),''string'',num2str(tmpcolor));',...
    'end; clear tmpcolor;'] } ...
    ...
    {'Style','text','string','Mark order','tag','txt_order','enable',order_enable}, ...
    {'Style','edit','string',vararg2str(g.order),'tag','edt_order','enable',order_enable}, ...
    {}, ...
    ...
    ...        {'Style','text','string','Mark flags','enable',flags_enable}, ...
    ...        {'Style','edit','string',g.flags,'tag','edt_flags','enable',flags_enable}, ...
    }, ...
    'pophelp(''pop_mark_add_label'');', 'add a new label to the marks structure -- pop_mark_add_label()' ...
    );

action=action_cell{results{1}};
switch action%action
    case 'add'
        switch results{2}%info_type
            case 1
                info_type='time_info';
                marks_prop{1}=results{3};
                marks_prop{2}=str2num(results{4});
                marks_prop{3}=zeros(1,EEG.pnts);
            case 2
                info_type='chan_info';
                marks_prop{1}=results{3};
                marks_prop{2}=str2num(results{5});
                marks_prop{3}=str2num(results{6});
                marks_prop{4}=str2num(results{7});
                marks_prop{5}=zeros(EEG.nbchan,1);
            case 3
                info_type='comp_info';
                marks_prop{1}=results{3};
                marks_prop{2}=str2num(results{5});
                marks_prop{3}=str2num(results{6});
                marks_prop{4}=str2num(results{7});
                marks_prop{5}=zeros(min(size(EEG.icaweights)),1);
        end
        
        if ~isfield(EEG,'marks');
            EEG=marks_init(EEG);
        end
        
        EEG = marks_add_label(EEG,info_type, marks_prop);
        
    case {'delete','clear'}
        info_type=info_type_cell{results{3}};
        
        flag_label=results{3};
        if ischar(flag_label);
            flag_label={flag_label};
        end
        
        for i=1:length(flag_label);
            clear labelind;
            eval(['label_ind=find(strcmp(''',flag_label{i},''',{EEG.marks.',info_type,'.label}))']);
            if ~isempty(label_ind);
                if strcmp(action,'delete');
                    disp(['Deleting ''',flag_label{i},''' flag type...']);
                    eval(['EEG.marks.',info_type,'(',num2str(label_ind),')=[];']);
                else
                    disp(['Clearing ''',flag_label{i},''' flag type...']);
                    eval(['EEG.marks.',info_type,'(',num2str(label_ind),').flags)=zeros(size(EEG.marks.',info_type,'(',num2str(label_ind),').flags));']);
                end
            end
        end
end